// Mocks generated by Mockito 5.2.0 from annotations
// in game_of_flutter/test/test_helper/mocks/services/services_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:game_of_flutter/infrastructure/domain/character.dart' as _i5;
import 'package:game_of_flutter/infrastructure/domain/house.dart' as _i3;
import 'package:game_of_flutter/infrastructure/repositories/character_repository.dart'
    as _i4;
import 'package:game_of_flutter/infrastructure/repositories/house_repository.dart'
    as _i2;
import 'package:game_of_flutter/infrastructure/services/character_service.dart'
    as _i8;
import 'package:game_of_flutter/infrastructure/services/house_service.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHouseRepository_0 extends _i1.Fake implements _i2.HouseRepository {}

class _FakeHouse_1 extends _i1.Fake implements _i3.House {}

class _FakeCharacterRepository_2 extends _i1.Fake
    implements _i4.CharacterRepository {}

class _FakeCharacter_3 extends _i1.Fake implements _i5.Character {}

/// A class which mocks [HouseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHouseService extends _i1.Mock implements _i6.HouseService {
  MockHouseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HouseRepository get houseRepository =>
      (super.noSuchMethod(Invocation.getter(#houseRepository),
          returnValue: _FakeHouseRepository_0()) as _i2.HouseRepository);
  @override
  _i7.Future<List<_i3.House>> getAll({int? page = 1}) =>
      (super.noSuchMethod(Invocation.method(#getAll, [], {#page: page}),
              returnValue: Future<List<_i3.House>>.value(<_i3.House>[]))
          as _i7.Future<List<_i3.House>>);
  @override
  _i7.Future<_i3.House> getForId(int? id) =>
      (super.noSuchMethod(Invocation.method(#getForId, [id]),
              returnValue: Future<_i3.House>.value(_FakeHouse_1()))
          as _i7.Future<_i3.House>);
}

/// A class which mocks [CharacterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterService extends _i1.Mock implements _i8.CharacterService {
  MockCharacterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.CharacterRepository get characterRepository => (super.noSuchMethod(
      Invocation.getter(#characterRepository),
      returnValue: _FakeCharacterRepository_2()) as _i4.CharacterRepository);
  @override
  _i7.Future<List<_i5.Character>> getAll({int? page = 1}) =>
      (super.noSuchMethod(Invocation.method(#getAll, [], {#page: page}),
              returnValue: Future<List<_i5.Character>>.value(<_i5.Character>[]))
          as _i7.Future<List<_i5.Character>>);
  @override
  _i7.Future<_i5.Character> getForId(int? id) =>
      (super.noSuchMethod(Invocation.method(#getForId, [id]),
              returnValue: Future<_i5.Character>.value(_FakeCharacter_3()))
          as _i7.Future<_i5.Character>);
}
